##Custom by rball, for fabreeko micron 180mm running btt octopus, ac bed, ebb36, pi4##
## Micron Cfg for BigTreeTech OctoPus V1 TMC2209 UART config
[include ebb36.cfg]
[include mainsail.cfg]
[include KAMP_Settings.cfg]
[exclude_object]
[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_1B0031001647313234333236-if00
restart_method: command

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

[input_shaper]
shaper_freq_x: 25.8
shaper_type_x: mzv
shaper_freq_y: 67.4
shaper_type_y: mzv

[printer]
max_accel: 3000  # should not exceed the estimated max_accel for X and Y axes


#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0

[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 32
microsteps: 32
full_steps_per_rotation:200  
position_min: -5
position_endstop: 173
position_max: 173

homing_positive_dir: true
endstop_pin: EBBCan:PB5
homing_retract_dist: 5
homing_speed: 50  #Max 100 



[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 32
microsteps: 32
full_steps_per_rotation:200 
position_min: -5
position_endstop: 183
position_max: 183
homing_positive_dir: true
endstop_pin: PG9 
homing_retract_dist: 5
homing_speed: 50   #Max 100 

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

 
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 32
gear_ratio: 60:16
microsteps: 32
endstop_pin: PG10
#position_endstop: -0.5
position_max: 165
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 32
gear_ratio: 60:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 32
gear_ratio: 60:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 32
gear_ratio: 60:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Extruder
#####################################################################

##  Connected to MOTOR_6  ## controlled from ebb36####
##  Heater - HE0
##  Thermistor - T0
#[extruder]
#step_pin: PE2
#dir_pin: PE3
#enable_pin: !PD4
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
#rotation_distance: 22.6789511   #Bondtech 5mm Drive Gears
#gear_ratio: 50:10              #BMG Gear Ratio
#microsteps: 32
#full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
#nozzle_diameter: 0.400
#filament_diameter: 1.75
#heater_pin: PA2
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
#sensor_type: Generic 3950
#sensor_pin: EBBCan: PB13
#min_temp: -100
#max_temp: 270
#max_power: 1.0
#min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##  Try to keep pressure_advance below 1.0
#pressure_advance: 0.05
##  Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##  E0 on MOTOR6
#[tmc2209 extruder]
#uart_pin: PE1
#interpolate: false
#run_current: 0.3
#sense_resistor: 0.110
#stealthchop_threshold: 0



[extruder]
step_pin: EBBCan: PD0
dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
full_steps_per_rotation: 200
microsteps: 32
rotation_distance: 22.23
gear_ratio: 50:10
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: Generic 3950
sensor_pin: EBBCan: PA3
pwm_cycle_time: 0.0166
control: pid                #pid_Kp=24.568 pid_Ki=2.047 pid_Kd=73.704
pid_Kp: 24.568
pid_Ki: 2.047
pid_Kd: 73.704
min_temp: 0
max_temp: 280
max_power: 1.0
min_extrude_temp: 190

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
##  Heater Pin - BED_OUT - PA1
##  Thermistor - TB - PF3
heater_pin: PA3
sensor_type: Generic 3950
sensor_pin: PF3
max_power: 0.6
min_temp: 0
max_temp: 120
#pwm_cycle_time: 0.0166
#control: pid
#pid_kp: 34.777
#pid_ki: 1.467
#pid_kd: 206.054


# bed 100c PID tune 11-12-23 first tune pid_Kp=34.777 pid_Ki=1.467 pid_Kd=206.054
#####################################################################
#   Probe
#####################################################################

#[probe]  ## controlled from ebb36####
##  Klicky Probe - Since this is just an endstop switch its wired up to one of the endstop ports
## For the DIAG_7 port.  Change to !PG15 if probe is NO.
#pin: PG15
#x_offset: 0
#y_offset: 26.0
#z_offset: 0
#speed: 10.0
#samples: 3
#samples_result: median
#sample_retract_dist: 3.0
#samples_tolerance: 0.006
#samples_tolerance_retries: 3

#####################################################################
#   Fan Control
#####################################################################

[temperature_sensor octopus]
sensor_type: temperature_mcu

[temperature_sensor room]
sensor_type: Generic 3950
sensor_pin: PF5
min_temp:-100
max_temp: 100

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF4
min_temp:-100
max_temp: 100
gcode_id: C

[temperature_sensor raspberry_pi4]
sensor_type: temperature_host
min_temp: -10
max_temp: 100



#[fan]     ## controlled from ebb36####
##  Print Cooling Fan - FAN0 - MAKE SURE TO SET THE VOLTAGE JUMPER TO 5V , MOST 3007 FANS ARE 5V
#pin: PA8
#kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
#off_below: 0.10

#[heater_fan hotend_fan] ## controlled from ebb36####
##  Hotend Fan - FAN1
#pin: PE5
#max_power: 1.0
#kick_start_time: 0.5
#heater: extruder
#heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[controller_fan my_controller_fan]
pin: PD12
max_power: 1.0
kick_start_time: 0.5
heater: heater_bed


[controller_fan controller_fan]
##  Controller fan - FAN3
pin: PD13
max_power: 1.0
kick_start_time: 0.5
heater: heater_bed

#####################################################################
#   LED Control
#####################################################################

# Macros for setting the status leds on the Voron StealthBurner toolhead (or for any neopixel-type leds).
#
# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.
#
# CONFIGURATION
#
# Example neopixel configuration:


#[neopixel my_neopixel]
#pin:
#   The pin connected to the neopixel. This parameter must be
#   provided.
#chain_count:
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
#color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
#initial_RED: 0.0
#initial_GREEN: 0.0
#initial_BLUE: 0.0
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.
[neopixel sb_leds]
pin: PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 10
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.1
initial_GREEN: 0.0
initial_BLUE: 0.1
initial_WHITE: 0.8

#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.#
## Chamber Lighting - HE2 Connector (Optional)
[output_pin chamber_lights]
pin: PB10
pwm: True
cycle_time: 0.010
shutdown_value: 0
value: 0

[output_pin hotend_led]
pin: EBBCan:PD3
pwm: false
shutdown_value: 0
value: 1

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[quad_gantry_level]
gantry_corners:
  -60.2,-10.4
  244.1,234.5
##  Probe points   ### all 5s was 2s###
points:
  5,5
  5,150
  170,150
  170,5

speed: 100
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

#[safe_z_home]  ###comment out for klicky##
#home_xy_position:125,183
#speed:19
#z_hop:10

[bed_mesh]
speed: 100
horizontal_move_z: 10
mesh_min: 10, 10
mesh_max: 163, 173
fade_start: 0.6
fade_end: 10.0
zero_reference_position: 90, 90
probe_count: 5, 5
algorithm: bicubic

#####################################################################
# 	Macros
#####################################################################
[include klicky-probe.cfg]

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}                                           # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}                                     # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}                                            # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}                                            # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}                                               # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}                                               # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}            # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}            # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}            # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}            # Adapt y_max to margin and fuzz constraints

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       #
        {% set algorithm = "bicubic" %}                                                                                             #
        {% set min_points = 4 %}                                                                                                    #
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            #
        {% set min_points = 3 %}                                                                                                    #
    {% endif %}                                                                                                                     #

    {% set points_x = [points_x, min_points]|max %}                                                                                 # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y, min_points]|max %}                                                                                 # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x, probe_count[0]]|min %}
    {% set points_y = [points_y, probe_count[1]]|min %}

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations

        { action_respond_info( "Algorithm: {}.".format(                                                                              
            (algorithm),                                                                                                            
        )) }

        { action_respond_info("Default probe count: {},{}.".format(                                                                  
            (probe_count[0]),                                                                                                      
            (probe_count[1]),                                                                                                      
        )) }

        { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
            (points_x),                                                                                                            
            (points_y),                                                                                                            
        )) }                                                                                                              

        {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
            (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
            (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
        )) }

        {% if mesh_margin > 0 %}                                                                                                    
            {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                      
                (mesh_margin),                                                                                                      
                (mesh_margin),                                                                                      
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
        {% endif %}                                                                                                                

        {% if fuzz_amount > 0 %}                                                                                                    
            {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                    
                (fuzz_amount),                                                                                                      
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
        {% endif %}                                                                                                                

        { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                
            (adapted_x_min, adapted_y_min),                                                                                        
            (adapted_x_max, adapted_y_max),                                                                                        
        )) }

        {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}                                                                                                                     # End of verbose



[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  G28                   # Full home (XYZ)
  G90                   # Absolut position

  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  _CheckProbe action=query
  Attach_Probe
  BED_MESH_CALIBRATE                 # Starts bed mesh
  Dock_Probe
  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position        
   
#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#gcode:
    #{% set BED_TEMP = params.BED_TEMP|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    ## Start bed heating
    #M140 S{BED_TEMP}
    #G32                            ; home xyz
    # Use absolute coordinates
    #G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #ET_GCODE_OFFSET Z=0.0
    # Home the printer
    #G28
    #G28 Z                           # Homes Z again after QGL
    # Move the nozzle near the bed
    #G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    #M109 S{EXTRUDER_TEMP}
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 30.961
#*# pid_ki = 1.200
#*# pid_kd = 199.702
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.004281, -0.015719, 0.022947
#*# 	  0.017614, 0.000281, 0.001614
#*# 	  0.006947, 0.010947, -0.035719
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 76.22
#*# max_x = 99.12
#*# min_y = 66.14
#*# max_y = 109.68
#*#
#*# [stepper_z]
#*# position_endstop = -0.325
